class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      breweries: [],
      query: '',
      display: false,
      searchBy: 'City' //default

    };
    this.handleChange = this.handleChange.bind(this);
    this.handleClick = this.handleClick.bind(this);
  }

  componentDidMount() {
    this.findBreweries();
  } // for making a GET request to the API endpoint


  findBreweries() {
    let {
      searchBy,
      query
    } = this.state; //determine if searchBy is city or zipcode to determine whether to make API request to the city endpoint or postal code endpoint
  }

  handleChange(e) {
    console.log('e', e.target.value);
    this.setState({
      query: e.target.value
    });
  }

  handleClick(e) {
    //updates query search to Zipcode or to City (default)
    this.setState({
      searchBy: e.target.value
    });
    this.findBreweries();
  }

  render() {
    let {
      query,
      searchBy
    } = this.state;
    console.log(query);
    console.log(searchBy);
    return /*#__PURE__*/React.createElement("div", {
      className: "bg-washed-blue"
    }, /*#__PURE__*/React.createElement("h1", {
      className: "tc"
    }, "Brewery Finder"), /*#__PURE__*/React.createElement(Search, {
      change: this.handleChange,
      click: this.handleClick
    }));
  }

} //search function


const Search = props => {
  let options = ['City', 'Zip Code'];
  return /*#__PURE__*/React.createElement("div", {
    className: "mh7"
  }, /*#__PURE__*/React.createElement("input", {
    type: "text",
    className: "w-80 tc",
    placeholder: "Search by city or zipcode",
    onChange: props.change
  }), /*#__PURE__*/React.createElement("select", {
    className: "w-20 tc",
    onChange: props.click
  }, options.map((op, i) => {
    {
      /* console.log('i',i) */
    }
    return /*#__PURE__*/React.createElement("option", {
      value: op,
      key: i
    }, op);
  })));
};

ReactDOM.render( /*#__PURE__*/React.createElement(App, null), document.getElementById('app'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsiQXBwIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3RhdGUiLCJicmV3ZXJpZXMiLCJxdWVyeSIsImRpc3BsYXkiLCJzZWFyY2hCeSIsImhhbmRsZUNoYW5nZSIsImJpbmQiLCJoYW5kbGVDbGljayIsImNvbXBvbmVudERpZE1vdW50IiwiZmluZEJyZXdlcmllcyIsImUiLCJjb25zb2xlIiwibG9nIiwidGFyZ2V0IiwidmFsdWUiLCJzZXRTdGF0ZSIsInJlbmRlciIsIlNlYXJjaCIsIm9wdGlvbnMiLCJjaGFuZ2UiLCJjbGljayIsIm1hcCIsIm9wIiwiaSIsIlJlYWN0RE9NIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsR0FBTixTQUFrQkMsS0FBSyxDQUFDQyxTQUF4QixDQUFrQztBQUNoQ0MsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDakIsVUFBTUEsS0FBTjtBQUVBLFNBQUtDLEtBQUwsR0FBYTtBQUNYQyxNQUFBQSxTQUFTLEVBQUUsRUFEQTtBQUVYQyxNQUFBQSxLQUFLLEVBQUUsRUFGSTtBQUdYQyxNQUFBQSxPQUFPLEVBQUUsS0FIRTtBQUlYQyxNQUFBQSxRQUFRLEVBQUUsTUFKQyxDQUlNOztBQUpOLEtBQWI7QUFNQSxTQUFLQyxZQUFMLEdBQW9CLEtBQUtBLFlBQUwsQ0FBa0JDLElBQWxCLENBQXVCLElBQXZCLENBQXBCO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQixLQUFLQSxXQUFMLENBQWlCRCxJQUFqQixDQUFzQixJQUF0QixDQUFuQjtBQUNEOztBQUVERSxFQUFBQSxpQkFBaUIsR0FBRztBQUNsQixTQUFLQyxhQUFMO0FBQ0QsR0FoQitCLENBa0JoQzs7O0FBQ0FBLEVBQUFBLGFBQWEsR0FBRztBQUNkLFFBQUk7QUFBRUwsTUFBQUEsUUFBRjtBQUFZRixNQUFBQTtBQUFaLFFBQXNCLEtBQUtGLEtBQS9CLENBRGMsQ0FFZDtBQUNEOztBQUVESyxFQUFBQSxZQUFZLENBQUNLLENBQUQsRUFBSTtBQUNkQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxHQUFaLEVBQWlCRixDQUFDLENBQUNHLE1BQUYsQ0FBU0MsS0FBMUI7QUFDQSxTQUFLQyxRQUFMLENBQWM7QUFDWmIsTUFBQUEsS0FBSyxFQUFFUSxDQUFDLENBQUNHLE1BQUYsQ0FBU0M7QUFESixLQUFkO0FBR0Q7O0FBRURQLEVBQUFBLFdBQVcsQ0FBQ0csQ0FBRCxFQUFJO0FBQ2I7QUFDQSxTQUFLSyxRQUFMLENBQWM7QUFDWlgsTUFBQUEsUUFBUSxFQUFFTSxDQUFDLENBQUNHLE1BQUYsQ0FBU0M7QUFEUCxLQUFkO0FBR0EsU0FBS0wsYUFBTDtBQUNEOztBQUVETyxFQUFBQSxNQUFNLEdBQUc7QUFDUCxRQUFJO0FBQUVkLE1BQUFBLEtBQUY7QUFBU0UsTUFBQUE7QUFBVCxRQUFzQixLQUFLSixLQUEvQjtBQUNBVyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWVYsS0FBWjtBQUNBUyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWVIsUUFBWjtBQUVBLHdCQUNFO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixvQkFDRTtBQUFJLE1BQUEsU0FBUyxFQUFDO0FBQWQsd0JBREYsZUFFRSxvQkFBQyxNQUFEO0FBQVEsTUFBQSxNQUFNLEVBQUUsS0FBS0MsWUFBckI7QUFBbUMsTUFBQSxLQUFLLEVBQUUsS0FBS0U7QUFBL0MsTUFGRixDQURGO0FBTUQ7O0FBbEQrQixDLENBcURsQzs7O0FBQ0EsTUFBTVUsTUFBTSxHQUFHbEIsS0FBSyxJQUFJO0FBQ3RCLE1BQUltQixPQUFPLEdBQUcsQ0FBQyxNQUFELEVBQVMsVUFBVCxDQUFkO0FBQ0Esc0JBQ0U7QUFBSyxJQUFBLFNBQVMsRUFBQztBQUFmLGtCQUNBO0FBQU8sSUFBQSxJQUFJLEVBQUMsTUFBWjtBQUFtQixJQUFBLFNBQVMsRUFBQyxTQUE3QjtBQUF1QyxJQUFBLFdBQVcsRUFBQywyQkFBbkQ7QUFBK0UsSUFBQSxRQUFRLEVBQUVuQixLQUFLLENBQUNvQjtBQUEvRixJQURBLGVBRUU7QUFBUSxJQUFBLFNBQVMsRUFBQyxTQUFsQjtBQUE0QixJQUFBLFFBQVEsRUFBRXBCLEtBQUssQ0FBQ3FCO0FBQTVDLEtBQ0dGLE9BQU8sQ0FBQ0csR0FBUixDQUFZLENBQUNDLEVBQUQsRUFBS0MsQ0FBTCxLQUFXO0FBQ3RCO0FBQUM7QUFBeUI7QUFDNUIsd0JBQ0U7QUFBUSxNQUFBLEtBQUssRUFBRUQsRUFBZjtBQUFtQixNQUFBLEdBQUcsRUFBRUM7QUFBeEIsT0FBNEJELEVBQTVCLENBREY7QUFFRSxHQUpELENBREgsQ0FGRixDQURGO0FBWUQsQ0FkRDs7QUFnQkFFLFFBQVEsQ0FBQ1IsTUFBVCxlQUFnQixvQkFBQyxHQUFELE9BQWhCLEVBQXdCUyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsS0FBeEIsQ0FBeEIiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBicmV3ZXJpZXM6IFtdLFxuICAgICAgcXVlcnk6ICcnLFxuICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICBzZWFyY2hCeTogJ0NpdHknIC8vZGVmYXVsdFxuICAgIH1cbiAgICB0aGlzLmhhbmRsZUNoYW5nZSA9IHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVDbGljayA9IHRoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuZmluZEJyZXdlcmllcygpXG4gIH1cblxuICAvLyBmb3IgbWFraW5nIGEgR0VUIHJlcXVlc3QgdG8gdGhlIEFQSSBlbmRwb2ludFxuICBmaW5kQnJld2VyaWVzKCkge1xuICAgIGxldCB7IHNlYXJjaEJ5LCBxdWVyeSB9ID0gdGhpcy5zdGF0ZTtcbiAgICAvL2RldGVybWluZSBpZiBzZWFyY2hCeSBpcyBjaXR5IG9yIHppcGNvZGUgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gbWFrZSBBUEkgcmVxdWVzdCB0byB0aGUgY2l0eSBlbmRwb2ludCBvciBwb3N0YWwgY29kZSBlbmRwb2ludFxuICB9XG5cbiAgaGFuZGxlQ2hhbmdlKGUpIHtcbiAgICBjb25zb2xlLmxvZygnZScsIGUudGFyZ2V0LnZhbHVlKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHF1ZXJ5OiBlLnRhcmdldC52YWx1ZVxuICAgIH0pXG4gIH1cblxuICBoYW5kbGVDbGljayhlKSB7XG4gICAgLy91cGRhdGVzIHF1ZXJ5IHNlYXJjaCB0byBaaXBjb2RlIG9yIHRvIENpdHkgKGRlZmF1bHQpXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzZWFyY2hCeTogZS50YXJnZXQudmFsdWVcbiAgICB9KVxuICAgIHRoaXMuZmluZEJyZXdlcmllcygpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCB7IHF1ZXJ5LCBzZWFyY2hCeSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zb2xlLmxvZyhxdWVyeSk7XG4gICAgY29uc29sZS5sb2coc2VhcmNoQnkpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdiZy13YXNoZWQtYmx1ZSc+XG4gICAgICAgIDxoMSBjbGFzc05hbWU9J3RjJz5CcmV3ZXJ5IEZpbmRlcjwvaDE+XG4gICAgICAgIDxTZWFyY2ggY2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0gY2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9Lz5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG4vL3NlYXJjaCBmdW5jdGlvblxuY29uc3QgU2VhcmNoID0gcHJvcHMgPT4ge1xuICBsZXQgb3B0aW9ucyA9IFsnQ2l0eScsICdaaXAgQ29kZSddXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9J21oNyc+XG4gICAgPGlucHV0IHR5cGU9J3RleHQnIGNsYXNzTmFtZT0ndy04MCB0YycgcGxhY2Vob2xkZXI9J1NlYXJjaCBieSBjaXR5IG9yIHppcGNvZGUnIG9uQ2hhbmdlPXtwcm9wcy5jaGFuZ2V9Lz5cbiAgICAgIDxzZWxlY3QgY2xhc3NOYW1lPSd3LTIwIHRjJyBvbkNoYW5nZT17cHJvcHMuY2xpY2t9ID5cbiAgICAgICAge29wdGlvbnMubWFwKChvcCwgaSkgPT4ge1xuICAgICAgICAgIHsvKiBjb25zb2xlLmxvZygnaScsaSkgKi99XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT17b3B9IGtleT17aX0+e29wfTwvb3B0aW9uPlxuICAgICAgICApfSl9XG4gICAgICA8L3NlbGVjdD5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5SZWFjdERPTS5yZW5kZXIoPEFwcC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJykpOyJdfQ==