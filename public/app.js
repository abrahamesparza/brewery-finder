class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      breweries: [],
      query: '',
      display: false,
      searchBy: 'City' //default

    };
    this.handleChange = this.handleChange.bind(this);
    this.handleClick = this.handleClick.bind(this);
    this.findBreweries = this.findBreweries.bind(this);
  }

  componentDidMount() {// this.findBreweries()
  } // for making a GET request to the API endpoint


  findBreweries() {
    let {
      searchBy,
      query
    } = this.state; //determine if searchBy is city or zipcode to determine whether to make API request to the city endpoint or postal code endpoint

    if (searchBy === 'City' && query !== '') {
      fetch(`https://api.openbrewerydb.org/breweries?by_city=${query}`).then(res => res.json()).then(brews => {
        console.log('data', brews);
        this.setState({
          breweries: brews
        });
      }).catch(err => console.error('Errot in GET', err));
    } else if (searchBy === 'Zipcode' && query !== '') {
      fetch(`https://api.openbrewerydb.org/breweries?by_postal=${Number(query)}`).then(res => res.json()).then(brews => {
        console.log('data', brews);
        this.setState({
          breweries: brews
        });
      }).catch(err => console.error('Errot in GET', err));
    }
  }

  handleChange(e) {
    console.log('e', e.target.value);
    this.setState({
      query: e.target.value
    });
  }

  handleClick(e) {
    //updates query search to Zipcode or to City (default)
    this.setState({
      searchBy: e.target.value
    });
    this.findBreweries();
  }

  render() {
    let {
      query,
      searchBy,
      breweries
    } = this.state;
    console.log(query);
    console.log('searchBy', searchBy);
    console.log('matched:', breweries);
    return /*#__PURE__*/React.createElement("div", {
      className: "pa4 bg-moon-gray"
    }, /*#__PURE__*/React.createElement("h1", {
      className: "tc"
    }, "Brewery Finder"), /*#__PURE__*/React.createElement(Search, {
      change: this.handleChange,
      click: this.handleClick,
      search: this.findBreweries
    }));
  }

}
/* ----------------------------------------------------------------------- */
//search function


const Search = props => {
  let options = ['City', 'Zipcode'];
  return /*#__PURE__*/React.createElement("div", {
    className: "mh7"
  }, /*#__PURE__*/React.createElement("input", {
    type: "text",
    className: "w-80 tc",
    placeholder: "Search by city or zipcode",
    onChange: props.change
  }), /*#__PURE__*/React.createElement("select", {
    className: "w-20 tc",
    onChange: props.click
  }, options.map((op, i) => {
    {
      /* console.log('i',i) */
    }
    return /*#__PURE__*/React.createElement("option", {
      value: op,
      key: i
    }, op);
  })), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("input", {
    type: "button",
    className: "ph3",
    value: "Search",
    onClick: props.search
  }));
};

ReactDOM.render( /*#__PURE__*/React.createElement(App, null), document.getElementById('app'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,