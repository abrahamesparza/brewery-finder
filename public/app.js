class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      breweries: [],
      query: '',
      display: false,
      searchBy: 'City' //default

    };
    this.handleChange = this.handleChange.bind(this);
    this.handleClick = this.handleClick.bind(this);
    this.findBreweries = this.findBreweries.bind(this);
  } // for making a GET request to the API endpoint


  findBreweries() {
    let {
      searchBy,
      query
    } = this.state; //determine if searchBy is city or zipcode to determine whether to make API request to the city endpoint or postal code endpoint

    if (searchBy === 'City' && query !== '') {
      fetch(`https://api.openbrewerydb.org/breweries?by_city=${query}`).then(res => res.json()).then(brews => {
        // console.log('data', brews);
        this.setState({
          breweries: brews
        });
      }).catch(err => console.error('Errot in GET', err));
    } else if (searchBy === 'Zipcode' && query !== '') {
      fetch(`https://api.openbrewerydb.org/breweries?by_postal=${Number(query)}`).then(res => res.json()).then(brews => {
        console.log('data', brews);
        this.setState({
          breweries: brews
        });
      }).catch(err => console.error('Errot in GET', err));
    }
  }

  handleChange(e) {
    this.setState({
      query: e.target.value
    });
  }

  handleClick(e) {
    //updates query search to Zipcode or to City (default)
    this.setState({
      searchBy: e.target.value
    });
    this.findBreweries();
  }

  render() {
    console.log('Welcome to Brewery Finder! Hope you enjoy and find my mini app useful!\nView other projects created by myself at www.github.com/abrahamesparza');
    let {
      query,
      searchBy,
      breweries
    } = this.state;
    return /*#__PURE__*/React.createElement("div", {
      className: "pa3 bg-dark-gray"
    }, /*#__PURE__*/React.createElement("h1", {
      className: "tc f1 near-black"
    }, "Brewery Finder"), /*#__PURE__*/React.createElement(Search, {
      change: this.handleChange,
      click: this.handleClick,
      search: this.findBreweries
    }), /*#__PURE__*/React.createElement(BreweryList, {
      brews: breweries
    }));
  }

}
/* ----------------------------------------------------------------------- */
//search function


const Search = props => {
  let options = ['City', 'Zipcode'];
  return /*#__PURE__*/React.createElement("div", {
    className: "ml7 cover"
  }, /*#__PURE__*/React.createElement("input", {
    type: "text",
    className: "w-60 tc",
    placeholder: "Search by city or zipcode",
    onChange: props.change
  }), /*#__PURE__*/React.createElement("select", {
    className: "w-10 tc ml1",
    onChange: props.click
  }, options.map((op, i) => {
    {
      /* console.log('i',i) */
    }
    return /*#__PURE__*/React.createElement("option", {
      value: op,
      key: i
    }, op);
  })), /*#__PURE__*/React.createElement("input", {
    type: "button",
    className: "ph3 w-10 tc ml1",
    value: "Search",
    onClick: props.search
  }));
};
/* ----------------------------------------------------------------------- */
//list breweries function


const BreweryList = props => {
  return /*#__PURE__*/React.createElement("div", {
    className: "fl w-100 pa2 mt5"
  }, props.brews.map((brew, i) => /*#__PURE__*/React.createElement(Brewery, {
    key: i,
    id: brew.id,
    name: brew.name,
    phone: brew.phone,
    street: brew.street,
    website: brew.website_url
  })));
};
/* ----------------------------------------------------------------------- */


const Brewery = props => {
  return /*#__PURE__*/React.createElement("div", {
    className: "tc dt-row-m br2 pa2 ma2 grow bg-dark-gray"
  }, /*#__PURE__*/React.createElement("ul", {
    className: "list"
  }, /*#__PURE__*/React.createElement("a", {
    className: "link underline-hover near-white",
    key: props.id,
    target: "_blank",
    href: props.website
  }, /*#__PURE__*/React.createElement("li", {
    className: "f3 mh5 grow",
    key: props.id
  }, props.name))), /*#__PURE__*/React.createElement("div", {
    className: "tc"
  }, /*#__PURE__*/React.createElement("p", {
    className: "tc f4 near-white"
  }, props.phone), /*#__PURE__*/React.createElement("p", {
    className: "tc f4 near-white bb bw1 b--near-white"
  }, props.street)));
};

ReactDOM.render( /*#__PURE__*/React.createElement(App, null), document.getElementById('app'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,